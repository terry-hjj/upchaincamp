/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MyTokenMarket,
  MyTokenMarketInterface,
} from "../../contracts/MyTokenMarket";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
      {
        internalType: "address",
        name: "_weth",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sushi",
        type: "address",
      },
      {
        internalType: "address",
        name: "_masterChef",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "AddLiquidity",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minTokenAmount",
        type: "uint256",
      },
    ],
    name: "buyToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposited",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "masterChef",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sushi",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001ae838038062001ae88339818101604052810190620000379190620001f0565b846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000278565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b8826200018b565b9050919050565b620001ca81620001ab565b8114620001d657600080fd5b50565b600081519050620001ea81620001bf565b92915050565b600080600080600060a086880312156200020f576200020e62000186565b5b60006200021f88828901620001d9565b95505060206200023288828901620001d9565b94505060406200024588828901620001d9565b93505060606200025888828901620001d9565b92505060806200026b88828901620001d9565b9150509295509295909350565b61186080620002886000396000f3fe6080604052600436106100865760003560e01c8063575a86b211610059578063575a86b214610114578063eef49ee31461013f578063f53d9d581461016a578063f887ea4014610186578063fc0c546a146101b157610086565b80630a0879031461008b5780632d296bf1146100b65780633ccfd60b146100d25780633fc8cef3146100e9575b600080fd5b34801561009757600080fd5b506100a06101dc565b6040516100ad9190610ebd565b60405180910390f35b6100d060048036038101906100cb9190610f22565b610202565b005b3480156100de57600080fd5b506100e7610595565b005b3480156100f557600080fd5b506100fe610764565b60405161010b9190610ebd565b60405180910390f35b34801561012057600080fd5b5061012961078a565b6040516101369190610ebd565b60405180910390f35b34801561014b57600080fd5b506101546107b0565b6040516101619190610f5e565b60405180910390f35b610184600480360381019061017f9190610f22565b6107b6565b005b34801561019257600080fd5b5061019b610940565b6040516101a89190610ebd565b60405180910390f35b3480156101bd57600080fd5b506101c6610966565b6040516101d39190610ebd565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600267ffffffffffffffff81111561021f5761021e610f79565b5b60405190808252806020026020018201604052801561024d5781602001602082028036833780820191505090505b509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061028757610286610fa8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106102f6576102f5610fa8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ff36ab534848430426040518663ffffffff1660e01b81526004016103929493929190611095565b60006040518083038185885af11580156103b0573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f820116820180604052508101906103da9190611220565b5060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104379190610ebd565b602060405180830381865afa158015610454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104789190611269565b90506104e7600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661098a9092919063ffffffff16565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb1586000836040518363ffffffff1660e01b81526004016105459291906112db565b600060405180830381600087803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b5050505080600560008282546105899190611333565b92505081905550505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e7060006005546040518363ffffffff1660e01b81526004016105f59291906112db565b600060405180830381600087803b15801561060f57600080fd5b505af1158015610623573d6000803e3d6000fd5b505050506106743360055460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610ad99092919063ffffffff16565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106d19190610ebd565b602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190611269565b90506107613382600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610ad99092919063ffffffff16565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b61080333308360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b5f909392919063ffffffff16565b610870600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661098a9092919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d7193460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460008033426040518863ffffffff1660e01b81526004016108f796959493929190611367565b60606040518083038185885af1158015610915573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061093a91906113c8565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000811480610a14575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016109d192919061141b565b602060405180830381865afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a129190611269565b145b610a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4a906114c7565b60405180910390fd5b610ad48363095ea7b360e01b8484604051602401610a729291906114e7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610be8565b505050565b610b5a8363a9059cbb60e01b8484604051602401610af89291906114e7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610be8565b505050565b610be2846323b872dd60e01b858585604051602401610b8093929190611510565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610be8565b50505050565b6000610c4a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610caf9092919063ffffffff16565b9050600081511115610caa5780806020019051810190610c6a919061157f565b610ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca09061161e565b60405180910390fd5b5b505050565b6060610cbe8484600085610cc7565b90509392505050565b606082471015610d0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d03906116b0565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610d359190611741565b60006040518083038185875af1925050503d8060008114610d72576040519150601f19603f3d011682016040523d82523d6000602084013e610d77565b606091505b5091509150610d8887838387610d94565b92505050949350505050565b60608315610df6576000835103610dee57610dae85610e09565b610ded576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de4906117a4565b60405180910390fd5b5b829050610e01565b610e008383610e2c565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610e3f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e739190611808565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ea782610e7c565b9050919050565b610eb781610e9c565b82525050565b6000602082019050610ed26000830184610eae565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610eff81610eec565b8114610f0a57600080fd5b50565b600081359050610f1c81610ef6565b92915050565b600060208284031215610f3857610f37610ee2565b5b6000610f4684828501610f0d565b91505092915050565b610f5881610eec565b82525050565b6000602082019050610f736000830184610f4f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61100c81610e9c565b82525050565b600061101e8383611003565b60208301905092915050565b6000602082019050919050565b600061104282610fd7565b61104c8185610fe2565b935061105783610ff3565b8060005b8381101561108857815161106f8882611012565b975061107a8361102a565b92505060018101905061105b565b5085935050505092915050565b60006080820190506110aa6000830187610f4f565b81810360208301526110bc8186611037565b90506110cb6040830185610eae565b6110d86060830184610f4f565b95945050505050565b600080fd5b6000601f19601f8301169050919050565b611100826110e6565b810181811067ffffffffffffffff8211171561111f5761111e610f79565b5b80604052505050565b6000611132610ed8565b905061113e82826110f7565b919050565b600067ffffffffffffffff82111561115e5761115d610f79565b5b602082029050602081019050919050565b600080fd5b60008151905061118381610ef6565b92915050565b600061119c61119784611143565b611128565b905080838252602082019050602084028301858111156111bf576111be61116f565b5b835b818110156111e857806111d48882611174565b8452602084019350506020810190506111c1565b5050509392505050565b600082601f830112611207576112066110e1565b5b8151611217848260208601611189565b91505092915050565b60006020828403121561123657611235610ee2565b5b600082015167ffffffffffffffff81111561125457611253610ee7565b5b611260848285016111f2565b91505092915050565b60006020828403121561127f5761127e610ee2565b5b600061128d84828501611174565b91505092915050565b6000819050919050565b6000819050919050565b60006112c56112c06112bb84611296565b6112a0565b610eec565b9050919050565b6112d5816112aa565b82525050565b60006040820190506112f060008301856112cc565b6112fd6020830184610f4f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133e82610eec565b915061134983610eec565b925082820190508082111561136157611360611304565b5b92915050565b600060c08201905061137c6000830189610eae565b6113896020830188610f4f565b61139660408301876112cc565b6113a360608301866112cc565b6113b06080830185610eae565b6113bd60a0830184610f4f565b979650505050505050565b6000806000606084860312156113e1576113e0610ee2565b5b60006113ef86828701611174565b935050602061140086828701611174565b925050604061141186828701611174565b9150509250925092565b60006040820190506114306000830185610eae565b61143d6020830184610eae565b9392505050565b600082825260208201905092915050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b60006114b1603683611444565b91506114bc82611455565b604082019050919050565b600060208201905081810360008301526114e0816114a4565b9050919050565b60006040820190506114fc6000830185610eae565b6115096020830184610f4f565b9392505050565b60006060820190506115256000830186610eae565b6115326020830185610eae565b61153f6040830184610f4f565b949350505050565b60008115159050919050565b61155c81611547565b811461156757600080fd5b50565b60008151905061157981611553565b92915050565b60006020828403121561159557611594610ee2565b5b60006115a38482850161156a565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611608602a83611444565b9150611613826115ac565b604082019050919050565b60006020820190508181036000830152611637816115fb565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061169a602683611444565b91506116a58261163e565b604082019050919050565b600060208201905081810360008301526116c98161168d565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156117045780820151818401526020810190506116e9565b60008484015250505050565b600061171b826116d0565b61172581856116db565b93506117358185602086016116e6565b80840191505092915050565b600061174d8284611710565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061178e601d83611444565b915061179982611758565b602082019050919050565b600060208201905081810360008301526117bd81611781565b9050919050565b600081519050919050565b60006117da826117c4565b6117e48185611444565b93506117f48185602086016116e6565b6117fd816110e6565b840191505092915050565b6000602082019050818103600083015261182281846117cf565b90509291505056fea2646970667358221220e9ac7aeb5128544ad5a35da02e5c7016185a4c312fa8978603788cb82084abab64736f6c63430008120033";

type MyTokenMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyTokenMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyTokenMarket__factory extends ContractFactory {
  constructor(...args: MyTokenMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    _sushi: PromiseOrValue<string>,
    _masterChef: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MyTokenMarket> {
    return super.deploy(
      _token,
      _router,
      _weth,
      _sushi,
      _masterChef,
      overrides || {}
    ) as Promise<MyTokenMarket>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    _sushi: PromiseOrValue<string>,
    _masterChef: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token,
      _router,
      _weth,
      _sushi,
      _masterChef,
      overrides || {}
    );
  }
  override attach(address: string): MyTokenMarket {
    return super.attach(address) as MyTokenMarket;
  }
  override connect(signer: Signer): MyTokenMarket__factory {
    return super.connect(signer) as MyTokenMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyTokenMarketInterface {
    return new utils.Interface(_abi) as MyTokenMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MyTokenMarket {
    return new Contract(address, _abi, signerOrProvider) as MyTokenMarket;
  }
}
